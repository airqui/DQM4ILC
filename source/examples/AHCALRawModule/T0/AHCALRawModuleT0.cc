/// \file AHCALRawModuleT0.cc
/*
 *-------------------------------------------------------------
 * AHCALRawModule.cc source template automatically modified from 
 * CaloHitModule  generated by a class generator
 * by A. Irles, DESY, 23 March 2016
 *--------------------------------------------------------------
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "AHCALRawModuleT0.h"
// to handle and acces to the elements in the LCIO generic Object

// -- std headers
#include <ctime>
#include <cstdlib>
#include <limits>

//#ifndef USELCIO
//#define USELCIO
#include "EVENT/LCGenericObject.h"
#include "EVENT/LCCollection.h"
#include "EVENT/LCEvent.h"
#include "EVENT/LCIO.h"
#include "UTIL/CellIDDecoder.h"
#include "UTIL/LCTOOLS.h"
//#endif

// -- dqm4hep headers
#include "dqm4hep/DQMMonitorElement.h"
#include "dqm4hep/DQMCoreTool.h"
#include "dqm4hep/DQMRun.h"
#include "dqm4hep/DQMXmlHelper.h"
#include "dqm4hep/DQMEvent.h"
#include "dqm4hep/DQMQualityTest.h"
#include "dqm4hep/DQMModuleApi.h"
#include "dqm4hep/DQMPlugin.h"

// -- root headers
#include "TRandom.h"
#include "TString.h" // Added by Tom for TString handling


//using namespace lcio;

namespace dqm4hep
{
  // module plugin declaration
  DQM_PLUGIN_DECL( AHCALRawModuleT0 , "AHCALRawModuleT0" )

  //-------------------------------------------------------------------------------------------------

  AHCALRawModuleT0::AHCALRawModuleT0() :
  DQMAnalysisModule()
  {
    setDetectorName("NO DETECTOR");
    setVersion(1, 0, 0);
  }

  //-------------------------------------------------------------------------------------------------

  AHCALRawModuleT0::~AHCALRawModuleT0()
  {
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode AHCALRawModuleT0::readSettings(const TiXmlHandle xmlHandle)
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- readSettings()" );

    //-----------------------------------------------------

    m_ChipID1 = 0;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, 
                            DQMXmlHelper::readParameterValue(xmlHandle, "ChipID1", m_ChipID1));
    m_ChipID2 = 0;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, 
                            DQMXmlHelper::readParameterValue(xmlHandle, "ChipID2", m_ChipID2));
    m_ChipID3 = 0;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, 
                            DQMXmlHelper::readParameterValue(xmlHandle, "ChipID3", m_ChipID3));
    m_ChipID4 = 0;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, 
                            DQMXmlHelper::readParameterValue(xmlHandle, "ChipID4", m_ChipID4));
    m_ChipID5 = 0;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, 
                            DQMXmlHelper::readParameterValue(xmlHandle, "ChipID5", m_ChipID5));
    m_ChipID6 = 0;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, 
                            DQMXmlHelper::readParameterValue(xmlHandle, "ChipID6", m_ChipID6));

    //-----------------------------------------------------

    m_ChannelNum1 = 0;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, 
                            DQMXmlHelper::readParameterValue(xmlHandle,"ChannelNum1", m_ChannelNum1));
    m_ChannelNum2 = 0;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, 
                            DQMXmlHelper::readParameterValue(xmlHandle, "ChannelNum2", m_ChannelNum2));
    m_ChannelNum3 = 0;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, 
                            DQMXmlHelper::readParameterValue(xmlHandle, "ChannelNum3", m_ChannelNum3));
    m_ChannelNum4 = 0;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, 
                            DQMXmlHelper::readParameterValue(xmlHandle, "ChannelNum4", m_ChannelNum4));
    m_ChannelNum5 = 0;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, 
                            DQMXmlHelper::readParameterValue(xmlHandle, "ChannelNum5", m_ChannelNum5));
    m_ChannelNum6 = 0;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, 
                            DQMXmlHelper::readParameterValue(xmlHandle, "ChannelNum6", m_ChannelNum6));
    //-----------------------------------------------------

    m_pADC_hitbit0_1 = NULL;
    m_pADC_hitbit1_1 = NULL;
    m_pADC_hitbit1Agree_1 = NULL;

    m_pADC_hitbit0_2 = NULL;
    m_pADC_hitbit1_2 = NULL;
    m_pADC_hitbit1Agree_2 = NULL;

    m_pADC_hitbit0_3 = NULL;
    m_pADC_hitbit1_3 = NULL;
    m_pADC_hitbit1Agree_3 = NULL;

    m_pADC_hitbit0_4 = NULL;
    m_pADC_hitbit1_4 = NULL;
    m_pADC_hitbit1Agree_4 = NULL;

    m_pADC_hitbit0_5 = NULL;
    m_pADC_hitbit1_5 = NULL;
    m_pADC_hitbit1Agree_5 = NULL;

    m_pADC_hitbit0_6 = NULL;
    m_pADC_hitbit1_6 = NULL;
    m_pADC_hitbit1Agree_6 = NULL;

    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb0_ch1", m_pADC_hitbit0_1));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb1_ch1", m_pADC_hitbit1_1));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb1_ch1_Agree", m_pADC_hitbit1Agree_1));

    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb0_ch2", m_pADC_hitbit0_2));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb1_ch2", m_pADC_hitbit1_2));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb1_ch2_Agree", m_pADC_hitbit1Agree_2));

    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb0_ch3", m_pADC_hitbit0_3));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb1_ch3", m_pADC_hitbit1_3));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb1_ch3_Agree", m_pADC_hitbit1Agree_3));

    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb0_ch4", m_pADC_hitbit0_4));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb1_ch4", m_pADC_hitbit1_4));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb1_ch4_Agree", m_pADC_hitbit1Agree_4));

    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb0_ch5", m_pADC_hitbit0_5));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb1_ch5", m_pADC_hitbit1_5));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb1_ch5_Agree", m_pADC_hitbit1Agree_5));

    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb0_ch6", m_pADC_hitbit0_6));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb1_ch6", m_pADC_hitbit1_6));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb1_ch6_Agree", m_pADC_hitbit1Agree_6));

    m_pT0Events = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "T0Events", m_pT0Events));

    //-----------------------------------------------------

    m_dumpEvent = false;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, DQMXmlHelper::readParameterValue(xmlHandle,
													     "DumpEvent", m_dumpEvent));

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode AHCALRawModuleT0::initModule()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- init()" );

    // print directory structure of monitor element storage in console
    DQMModuleApi::cd(this);
    DQMModuleApi::ls(this, true);

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode AHCALRawModuleT0::endModule()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- end()" );
    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode AHCALRawModuleT0::processEvent(DQMEvent *pEvent)
  {

    int CycleNrIndex = 0;
    int BxIDIndex = 1;
    int EvtNrIndex = 2;
    int ChipIDIndex = 3;
    int NChannelsIndex = 4;
    int TDCFirstChannelIndex = 5;
    int ADCFirstChannelIndex = TDCFirstChannelIndex+36;

    EVENT::LCEvent *pLCEvent = pEvent->getEvent<EVENT::LCEvent>();

    if(!pLCEvent)
      return STATUS_CODE_FAILURE;

    if(m_dumpEvent)
      UTIL::LCTOOLS::dumpEvent(pLCEvent);

    const std::vector<std::string> *pCollectionNames = pLCEvent->getCollectionNames();


    for(std::vector<std::string>::const_iterator colIter = pCollectionNames->begin();
	colIter != pCollectionNames->end() ; ++colIter)
      {

	const std::string &collectionName(*colIter);

	EVENT::LCCollection *pLCCollection = pLCEvent->getCollection(collectionName);

	if(collectionName=="EUDAQDataScCAL")
	  {

	    if(pLCCollection->getTypeName() == EVENT::LCIO::LCGENERICOBJECT)
	      {

		const int nElements = pLCCollection->getNumberOfElements();
		for(int e=0 ; e<nElements ; e++)
		  {
		    const EVENT::LCGenericObject *const pAHCALRaw = 
		      dynamic_cast<const EVENT::LCGenericObject *const>(pLCCollection->getElementAt(e));

		    if(NULL == pAHCALRaw)
		      continue;

		    const int nChannels = pAHCALRaw->getIntVal(NChannelsIndex);
		    if(nChannels!= 36) {
		      LOG4CXX_INFO( dqmMainLogger , "Wrong number of channels ("<<nChannels<<"), skip event" ); 
		      continue;
		    }

	

		    for(int f=0 ; f<nChannels ; f++)		// This loop iterates over the channels in each readout cycle
		      {

			bool T0ch_1=false, T0ch_2=false, T0ch_3=false, T0ch_4=false, T0ch_5=false, T0ch_6=false;
			if(pAHCALRaw->getIntVal(ChipIDIndex) == m_ChipID1 && f == m_ChannelNum1 ) T0ch_1=true;
			if(pAHCALRaw->getIntVal(ChipIDIndex) == m_ChipID2 && f == m_ChannelNum2 ) T0ch_2=true;
			if(pAHCALRaw->getIntVal(ChipIDIndex) == m_ChipID3 && f == m_ChannelNum3 ) T0ch_3=true;
			if(pAHCALRaw->getIntVal(ChipIDIndex) == m_ChipID4 && f == m_ChannelNum4 ) T0ch_4=true;
			if(pAHCALRaw->getIntVal(ChipIDIndex) == m_ChipID5 && f == m_ChannelNum5 ) T0ch_5=true;
			if(pAHCALRaw->getIntVal(ChipIDIndex) == m_ChipID6 && f == m_ChannelNum6 ) T0ch_6=true;

			if( T0ch_1==true || T0ch_2==true || T0ch_3==true || T0ch_4==true || T0ch_5==true || T0ch_6==true ){ 


			  // Vectors for storing our TDC and ADC by channel

			  std::vector<int> tdcRAW(nChannels);
			  std::vector<int> adcRAW(nChannels);

			  std::vector<int> tdc(nChannels);
			  std::vector<int> adc(nChannels);

			  std::vector<int> hitbit_tdc(nChannels);
			  std::vector<int> gainbit_tdc(nChannels);

			  std::vector<int> hitbit_adc(nChannels);
			  std::vector<int> gainbit_adc(nChannels);

			  tdcRAW[f] = pAHCALRaw->getIntVal(TDCFirstChannelIndex+f);
			  adcRAW[f] = pAHCALRaw->getIntVal(ADCFirstChannelIndex+f);

			  tdc[f] = tdcRAW[f]%4096;
			  adc[f] = adcRAW[f]%4096;

			  hitbit_adc[f] = (adcRAW[f] & 0x1000)?1:0;//(adcRAW[f] / 4096) % 2;//(adcRAW[f]& 0x1000)/4096;
			  gainbit_adc[f] = (adcRAW[f] & 0x2000)?1:0;////adcRAW[f] / 8192;//(adcRAW[f]& 0x2000)/8192;

			  hitbit_tdc[f] = (tdcRAW[f] & 0x1000)?1:0;
			  gainbit_tdc[f] = (tdcRAW[f] & 0x2000)?1:0;


			  if(adc[f]<0) continue;	// Skipping negative/bad events

	
			  // Filling ADC histograms
			  if(T0ch_1) {
			    if(hitbit_adc[f]==0) m_pADC_hitbit0_1->get<TH1I>()->Fill(adc[f]);
			    if(hitbit_adc[f]==1) m_pADC_hitbit1_1->get<TH1I>()->Fill(adc[f]);
			    if(hitbit_adc[f]==1 && hitbit_tdc[f]==1) m_pADC_hitbit1Agree_1->get<TH1I>()->Fill(adc[f]);
			    if(hitbit_adc[f]==1 && adc[f]>1000) m_pT0Events->get<TH1I>()->Fill(1);
			  }
			  if(T0ch_2) {
			    if(hitbit_adc[f]==0) m_pADC_hitbit0_2->get<TH1I>()->Fill(adc[f]);
			    if(hitbit_adc[f]==1) m_pADC_hitbit1_2->get<TH1I>()->Fill(adc[f]);
			    if(hitbit_adc[f]==1 && hitbit_tdc[f]==1) m_pADC_hitbit1Agree_2->get<TH1I>()->Fill(adc[f]);
			    if(hitbit_adc[f]==1 && adc[f]>1000) m_pT0Events->get<TH1I>()->Fill(2);
			  }
			  if(T0ch_3) {
			    if(hitbit_adc[f]==0) m_pADC_hitbit0_3->get<TH1I>()->Fill(adc[f]);
			    if(hitbit_adc[f]==1) m_pADC_hitbit1_3->get<TH1I>()->Fill(adc[f]);
			    if(hitbit_adc[f]==1 && hitbit_tdc[f]==1) m_pADC_hitbit1Agree_3->get<TH1I>()->Fill(adc[f]);
			    if(hitbit_adc[f]==1 && adc[f]>1000) m_pT0Events->get<TH1I>()->Fill(3);
			  }
			  if(T0ch_4) {
			    if(hitbit_adc[f]==0) m_pADC_hitbit0_4->get<TH1I>()->Fill(adc[f]);
			    if(hitbit_adc[f]==1) m_pADC_hitbit1_4->get<TH1I>()->Fill(adc[f]);
			    if(hitbit_adc[f]==1 && hitbit_tdc[f]==1) m_pADC_hitbit1Agree_4->get<TH1I>()->Fill(adc[f]);
			    if(hitbit_adc[f]==1 && adc[f]>1000) m_pT0Events->get<TH1I>()->Fill(4);
			  }
			  if(T0ch_5) {
			    if(hitbit_adc[f]==0) m_pADC_hitbit0_5->get<TH1I>()->Fill(adc[f]);
			    if(hitbit_adc[f]==1) m_pADC_hitbit1_5->get<TH1I>()->Fill(adc[f]);
			    if(hitbit_adc[f]==1 && hitbit_tdc[f]==1) m_pADC_hitbit1Agree_5->get<TH1I>()->Fill(adc[f]);
			    if(hitbit_adc[f]==1 && adc[f]>1000) m_pT0Events->get<TH1I>()->Fill(5);
			  }
			  if(T0ch_6) {
			    if(hitbit_adc[f]==0) m_pADC_hitbit0_6->get<TH1I>()->Fill(adc[f]);
			    if(hitbit_adc[f]==1) m_pADC_hitbit1_6->get<TH1I>()->Fill(adc[f]);
			    if(hitbit_adc[f]==1 && hitbit_tdc[f]==1) m_pADC_hitbit1Agree_6->get<TH1I>()->Fill(adc[f]);
			    if(hitbit_adc[f]==1 && adc[f]>1000) m_pT0Events->get<TH1I>()->Fill(6);
			  }

		
			}//if f== chosen channel && chip =chosen chip

		      }//for f

		  }//for elements


	      }// if LCGENERICOBJECT

	  }//if collectionName == EUDAQDataScCAL
      }// iterator

    return STATUS_CODE_SUCCESS;

  }

  //-------------------------------------------------------------------------------------------------

  StatusCode AHCALRawModuleT0::startOfCycle()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- startOfCycle()" );
    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode AHCALRawModuleT0::endOfCycle()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- endOfCycle()" );

    // run all quality tests on all monitor elements
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::runQualityTests(this));

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode AHCALRawModuleT0::startOfRun(DQMRun *pRun)
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- startOfRun()" );
    LOG4CXX_INFO( dqmMainLogger , "Run no " << pRun->getRunNumber() );
    //	time_t startTime = pRun->getStartTime();
    time_t startTime = std::chrono::system_clock::to_time_t(pRun->getStartTime());

    std::string timeStr;
    DQMCoreTool::timeToHMS(startTime, timeStr);

    LOG4CXX_INFO( dqmMainLogger , "Start time " << timeStr );
    LOG4CXX_INFO( dqmMainLogger , "Detector is " << pRun->getDetectorName() );
    LOG4CXX_INFO( dqmMainLogger , "Description " << pRun->getDescription() );

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode AHCALRawModuleT0::endOfRun(DQMRun *pRun)
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- endOfRun()" );
    LOG4CXX_INFO( dqmMainLogger , "Run no " << pRun->getRunNumber() );

    //	time_t endTime = pRun->getEndTime();
    time_t endTime = std::chrono::system_clock::to_time_t(pRun->getEndTime());
    std::string timeStr;
    DQMCoreTool::timeToHMS(endTime, timeStr);

    LOG4CXX_INFO( dqmMainLogger , "End time " << timeStr );

    return STATUS_CODE_SUCCESS;
  }

};

