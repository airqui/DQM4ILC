/// \file AHCALRawModuleGlobal.cc
/*
 *-------------------------------------------------------------
 * AHCALRawModule.cc source template automatically modified from 
 * CaloHitModule  generated by a class generator
 * by A. Irles, DESY, 23 March 2016
 *--------------------------------------------------------------
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "AHCALRawModuleChannel.h"
// to handle and acces to the elements in the LCIO generic Object

// -- std headers
#include <ctime>
#include <cstdlib>
#include <limits>

//#ifndef USELCIO
//#define USELCIO
#include "EVENT/LCGenericObject.h"
#include "EVENT/LCCollection.h"
#include "EVENT/LCEvent.h"
#include "EVENT/LCIO.h"
#include "UTIL/CellIDDecoder.h"
#include "UTIL/LCTOOLS.h"
//#endif

// -- dqm4hep headers
#include "dqm4hep/DQMMonitorElement.h"
#include "dqm4hep/DQMCoreTool.h"
#include "dqm4hep/DQMRun.h"
#include "dqm4hep/DQMXmlHelper.h"
#include "dqm4hep/DQMEvent.h"
#include "dqm4hep/DQMQualityTest.h"
#include "dqm4hep/DQMModuleApi.h"
#include "dqm4hep/DQMPlugin.h"

// -- root headers
#include "TRandom.h"
#include "TString.h" // Added by Tom for TString handling


//using namespace lcio;

namespace dqm4hep
{
  // module plugin declaration
  DQM_PLUGIN_DECL( AHCALRawModuleChannel , "AHCALRawModuleChannel" )

  //-------------------------------------------------------------------------------------------------

  AHCALRawModuleChannel::AHCALRawModuleChannel() :
  DQMAnalysisModule()
  {
    setDetectorName("NO DETECTOR");
    setVersion(1, 0, 0);
  }

  //-------------------------------------------------------------------------------------------------

  AHCALRawModuleChannel::~AHCALRawModuleChannel()
  {
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode AHCALRawModuleChannel::readSettings(const TiXmlHandle xmlHandle)
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- readSettings()" );

    //m_pNHitElement = NULL;
    //RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle,
    //								       "NHit", m_pNHitElement));
    m_ChipID1 = 0;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, 
                            DQMXmlHelper::readParameterValue(xmlHandle, "ChipID1", m_ChipID1));
    m_ChipID2 = 0;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, 
                            DQMXmlHelper::readParameterValue(xmlHandle, "ChipID2", m_ChipID2));
    m_ChipID3 = 0;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, 
                            DQMXmlHelper::readParameterValue(xmlHandle,"ChipID3", m_ChipID3));
    m_ChipID4 = 0;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, 
                            DQMXmlHelper::readParameterValue(xmlHandle,"ChipID4", m_ChipID4));
    // Reading in our channel numers from the XML file
    m_ChannelNum1 = 0;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, 
                            DQMXmlHelper::readParameterValue(xmlHandle,"ChannelNum1", m_ChannelNum1));
    m_ChannelNum2 = 0;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, 
                            DQMXmlHelper::readParameterValue(xmlHandle, "ChannelNum2", m_ChannelNum2));
    m_ChannelNum3 = 0;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, 
                            DQMXmlHelper::readParameterValue(xmlHandle, "ChannelNum3", m_ChannelNum3));
    m_ChannelNum4 = 0;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, 
                            DQMXmlHelper::readParameterValue(xmlHandle, "ChannelNum4", m_ChannelNum4));

    // Dumpevent

    m_pADC_hitbit0_1 = NULL;
    m_pADC_hitbit1_1 = NULL;
    m_pADC_ROC_1 = NULL; //ROC
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb0_ch1", m_pADC_hitbit0_1));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb1_ch1",m_pADC_hitbit1_1));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_ROC_ch1",m_pADC_ROC_1)); //ROC
    m_pADC_hitbit0_1->get<TH1I>()->SetTitle(TString::Format("ADC_hb0_ChipID%d_chn%d",m_ChipID1,m_ChannelNum1));
    m_pADC_hitbit1_1->get<TH1I>()->SetTitle(TString::Format("ADC_hb1_ChipID%d_chn%d",m_ChipID1,m_ChannelNum1));
    //m_pADC_ROC_1->get<TH2I>()->SetTitle(TString::Format("ADC_ROC_ChipID%d_chn%d",m_ChipID1,m_ChannelNum1)); //ROC
    
    m_pTDC_hitbit0_1 = NULL;
    m_pTDC_hitbit1_1 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_hb0_ch1",m_pTDC_hitbit0_1));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_hb1_ch1",m_pTDC_hitbit1_1));
    m_pTDC_hitbit0_1->get<TH1I>()->SetTitle(TString::Format("TDC_hb0_ChipID%d_chn%d",m_ChipID1,m_ChannelNum1));
    m_pTDC_hitbit1_1->get<TH1I>()->SetTitle(TString::Format("TDC_hb1_ChipID%d_chn%d",m_ChipID1,m_ChannelNum1));

    m_pWrongBits_1 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "WrongBits_ch1",m_pWrongBits_1));
    m_pWrongBits_1->get<TH1I>()->SetTitle(TString::Format("WrongBits_ChipID%d_chn%d",m_ChipID1,m_ChannelNum1));

    m_pADC_WrongBits_1 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_WrongBits_ch1",m_pADC_WrongBits_1));
    m_pTDC_WrongBits_1 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_WrongBits_ch1",m_pTDC_WrongBits_1));

    //-----------------------------------------------------
    // channel 2, ADC and TDC
    m_pADC_hitbit0_2 = NULL;
    m_pADC_hitbit1_2 = NULL;
    m_pADC_ROC_2 = NULL; //ROC
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb0_ch2", m_pADC_hitbit0_2));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb1_ch2",m_pADC_hitbit1_2));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_ROC_ch2",m_pADC_ROC_2)); //ROC
    m_pADC_hitbit0_2->get<TH1I>()->SetTitle(TString::Format("ADC_hb0_ChipID%d_chn%d",m_ChipID2,m_ChannelNum2));
    m_pADC_hitbit1_2->get<TH1I>()->SetTitle(TString::Format("ADC_hb1_ChipID%d_chn%d",m_ChipID2,m_ChannelNum2));
    //m_pADC_ROC_2->get<TH2I>()->SetTitle(TString::Format("ADC_ROC_ChipID%d_chn%d",m_ChipID2,m_ChannelNum2)); //ROC
    
    m_pTDC_hitbit0_2 = NULL;
    m_pTDC_hitbit1_2 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_hb0_ch2",m_pTDC_hitbit0_2));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_hb1_ch2",m_pTDC_hitbit1_2));
    m_pTDC_hitbit0_2->get<TH1I>()->SetTitle(TString::Format("TDC_hb0_ChipID%d_chn%d",m_ChipID2,m_ChannelNum2));
    m_pTDC_hitbit1_2->get<TH1I>()->SetTitle(TString::Format("TDC_hb1_ChipID%d_chn%d",m_ChipID2,m_ChannelNum2));

    m_pWrongBits_2 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "WrongBits_ch2",m_pWrongBits_2));
    m_pWrongBits_2->get<TH1I>()->SetTitle(TString::Format("WrongBits_ChipID%d_chn%d",m_ChipID2,m_ChannelNum2));

    m_pADC_WrongBits_2 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_WrongBits_ch2",m_pADC_WrongBits_2));
    m_pTDC_WrongBits_2 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_WrongBits_ch2",m_pTDC_WrongBits_2));


    //-----------------------------------------------------
    // channel 3, ADC and TDC
    m_pADC_hitbit0_3 = NULL;
    m_pADC_hitbit1_3 = NULL;
    m_pADC_ROC_3 = NULL; //ROC
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb0_ch3", m_pADC_hitbit0_3));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb1_ch3",m_pADC_hitbit1_3));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_ROC_ch3",m_pADC_ROC_3)); //ROC
    m_pADC_hitbit0_3->get<TH1I>()->SetTitle(TString::Format("ADC_hb0_ChipID%d_chn%d",m_ChipID3,m_ChannelNum3));
    m_pADC_hitbit1_3->get<TH1I>()->SetTitle(TString::Format("ADC_hb1_ChipID%d_chn%d",m_ChipID3,m_ChannelNum3));
    //m_pADC_ROC_3->get<TH2I>()->SetTitle(TString::Format("ADC_ROC_ChipID%d_chn%d",m_ChipID3,m_ChannelNum3)); //ROC
    
    m_pTDC_hitbit0_3 = NULL;
    m_pTDC_hitbit1_3 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_hb0_ch3",m_pTDC_hitbit0_3));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_hb1_ch3",m_pTDC_hitbit1_3));
    m_pTDC_hitbit0_3->get<TH1I>()->SetTitle(TString::Format("TDC_hb0_ChipID%d_chn%d",m_ChipID3,m_ChannelNum3));
    m_pTDC_hitbit1_3->get<TH1I>()->SetTitle(TString::Format("TDC_hb1_ChipID%d_chn%d",m_ChipID3,m_ChannelNum3));

    m_pWrongBits_3 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "WrongBits_ch3",m_pWrongBits_3));
    m_pWrongBits_3->get<TH1I>()->SetTitle(TString::Format("WrongBits_ChipID%d_chn%d",m_ChipID3,m_ChannelNum3));

    m_pADC_WrongBits_3 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_WrongBits_ch3",m_pADC_WrongBits_3));
    m_pTDC_WrongBits_3 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_WrongBits_ch3",m_pTDC_WrongBits_3));


    //-----------------------------------------------------
    // channel 4, ADC and TDC
    m_pADC_hitbit0_4 = NULL;
    m_pADC_hitbit1_4 = NULL;
    m_pADC_ROC_4 = NULL; //ROC
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb0_ch4", m_pADC_hitbit0_4));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_hb1_ch4",m_pADC_hitbit1_4));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_ROC_ch4",m_pADC_ROC_4)); //ROC
    m_pADC_hitbit0_4->get<TH1I>()->SetTitle(TString::Format("ADC_hb0_ChipID%d_chn%d",m_ChipID4,m_ChannelNum4));
    m_pADC_hitbit1_4->get<TH1I>()->SetTitle(TString::Format("ADC_hb1_ChipID%d_chn%d",m_ChipID4,m_ChannelNum4));
    //m_pADC_ROC_4->get<TH2I>()->SetTitle(TString::Format("ADC_ROC_ChipID%d_chn%d",m_ChipID4,m_ChannelNum4)); //ROC
    
    m_pTDC_hitbit0_4 = NULL;
    m_pTDC_hitbit1_4 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_hb0_ch4",m_pTDC_hitbit0_4));
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_hb1_ch4",m_pTDC_hitbit1_4));
    m_pTDC_hitbit0_4->get<TH1I>()->SetTitle(TString::Format("TDC_hb0_ChipID%d_chn%d",m_ChipID4,m_ChannelNum4));
    m_pTDC_hitbit1_4->get<TH1I>()->SetTitle(TString::Format("TDC_hb1_ChipID%d_chn%d",m_ChipID4,m_ChannelNum4));

    m_pWrongBits_4 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "WrongBits_ch4",m_pWrongBits_4));
    m_pWrongBits_4->get<TH1I>()->SetTitle(TString::Format("WrongBits_ChipID%d_ch%d",m_ChipID4,m_ChannelNum4));

    m_pADC_WrongBits_4 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "ADC_WrongBits_ch4",m_pADC_WrongBits_4));
    m_pTDC_WrongBits_4 = NULL;
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TDC_WrongBits_ch4",m_pTDC_WrongBits_4));


    //-----------------------------------------------------
    m_dumpEvent = false;
    RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, DQMXmlHelper::readParameterValue(xmlHandle,
													     "DumpEvent", m_dumpEvent));

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode AHCALRawModuleChannel::initModule()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- init()" );

    // print directory structure of monitor element storage in console
    DQMModuleApi::cd(this);
    DQMModuleApi::ls(this, true);

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode AHCALRawModuleChannel::endModule()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- end()" );
    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode AHCALRawModuleChannel::processEvent(DQMEvent *pEvent)
  {

    int CycleNrIndex = 0;
    int BxIDIndex = 1;
    int EvtNrIndex = 2;
    int ChipIDIndex = 3;
    int NChannelsIndex = 4;
    int TDCFirstChannelIndex = 5;
    int TDCLastChannelIndex = TDCFirstChannelIndex+36-1;
    int ADCFirstChannelIndex = TDCLastChannelIndex;
    int ADCLastChannelIndex = ADCFirstChannelIndex+36;

    EVENT::LCEvent *pLCEvent = pEvent->getEvent<EVENT::LCEvent>();

    if(!pLCEvent)
      return STATUS_CODE_FAILURE;

    if(m_dumpEvent)
      UTIL::LCTOOLS::dumpEvent(pLCEvent);

    const std::vector<std::string> *pCollectionNames = pLCEvent->getCollectionNames();


    for(std::vector<std::string>::const_iterator colIter = pCollectionNames->begin();
	colIter != pCollectionNames->end() ; ++colIter)
      {

	const std::string &collectionName(*colIter);

	EVENT::LCCollection *pLCCollection = pLCEvent->getCollection(collectionName);

	if(collectionName=="EUDAQDataScCAL")
	  {

	    if(pLCCollection->getTypeName() == EVENT::LCIO::LCGENERICOBJECT)
	      {

		const int nElements = pLCCollection->getNumberOfElements();
		for(int e=0 ; e<nElements ; e++)
		  {
		    const EVENT::LCGenericObject *const pAHCALRaw = 
		      dynamic_cast<const EVENT::LCGenericObject *const>(pLCCollection->getElementAt(e));

		    if(NULL == pAHCALRaw)
		      continue;

		    const int nChannels = pAHCALRaw->getIntVal(NChannelsIndex);
		    if(nChannels!= 36) {
		      LOG4CXX_INFO( dqmMainLogger , "Wrong number of channels ("<<nChannels<<"), skip event" ); 
		      continue;
		    }

		    // just look into the entries for the 4 selected chips
		    // this makes the code less general but faster
		    if( (pAHCALRaw->getIntVal(ChipIDIndex) == m_ChipID1) || (pAHCALRaw->getIntVal(ChipIDIndex) == m_ChipID2) || (pAHCALRaw->getIntVal(ChipIDIndex) == m_ChipID3) || (pAHCALRaw->getIntVal(ChipIDIndex) == m_ChipID4) ){ 

		      // Vectors for storing our TDC and ADC by channel

		      std::vector<int> tdcRAW(nChannels);
		      std::vector<int> adcRAW(nChannels);

		      std::vector<int> tdc(nChannels);
		      std::vector<int> adc(nChannels);

		      std::vector<int> hitbit_tdc(nChannels);
		      std::vector<int> gainbit_tdc(nChannels);

		      std::vector<int> hitbit_adc(nChannels);
		      std::vector<int> gainbit_adc(nChannels);

		      for(int f=0 ; f<nChannels ; f++)		// This loop iterates over the channels in each readout cycle
			{

			    // just look into the entries for the 4 selected channels
			    // this makes the code less general but faster


			      tdcRAW[f] = pAHCALRaw->getIntVal(TDCFirstChannelIndex+f);
			      adcRAW[f] = pAHCALRaw->getIntVal(ADCFirstChannelIndex+f);

			      tdc[f] = tdcRAW[f]%4096;
			      adc[f] = adcRAW[f]%4096;

			      hitbit_adc[f] = (adcRAW[f]& 0x1000)/4096;
			      gainbit_adc[f] = (adcRAW[f]& 0x2000)/8192;

			      hitbit_tdc[f] = (tdcRAW[f]& 0x1000)/4096;
			      gainbit_tdc[f] = (tdcRAW[f]& 0x2000)/8192;

			      if( (hitbit_adc[f] != 0 && hitbit_adc[f] != 1) || (gainbit_adc[f] != 0 && gainbit_adc[f] != 1)) std::cout<<  hitbit_adc[f]<< " "<< gainbit_adc[f]<<std::endl;

			      if( f == m_ChannelNum1 || f == m_ChannelNum2 || f == m_ChannelNum3 || f == m_ChannelNum4 ){ 

			      if(f==m_ChannelNum1 && (pAHCALRaw->getIntVal(ChipIDIndex) == m_ChipID1)) {
				if(hitbit_adc[f]==0) m_pADC_hitbit0_1->get<TH1I>()->Fill(adc[f]);
				if(hitbit_adc[f]==1) m_pADC_hitbit1_1->get<TH1I>()->Fill(adc[f]);

				if(hitbit_adc[f]==0) m_pTDC_hitbit0_1->get<TH1I>()->Fill(tdc[f]);
				if(hitbit_adc[f]==1) m_pTDC_hitbit1_1->get<TH1I>()->Fill(tdc[f]);


				m_pADC_ROC_1->get<TH2I>()->Fill(pAHCALRaw->getIntVal(CycleNrIndex),adc[f]); //ROC
			  
				m_pWrongBits_1->get<TH1I>()->Fill(-1);

				if( (hitbit_tdc[f] != hitbit_adc[f]) && hitbit_adc[f]==1 ) {
				  m_pWrongBits_1->get<TH1I>()->Fill(0);  
				  m_pADC_WrongBits_1->get<TH1I>()->Fill(adc[f]);
				  m_pTDC_WrongBits_1->get<TH1I>()->Fill(tdc[f]);
				}
				if( (gainbit_tdc[f] != gainbit_adc[f]) && hitbit_adc[f]==1  ) m_pWrongBits_1->get<TH1I>()->Fill(1);  
				if( (hitbit_tdc[f] != hitbit_adc[f]) && (gainbit_tdc[f] != gainbit_adc[f]) && hitbit_adc[f]==1  )
				  m_pWrongBits_1->get<TH1I>()->Fill(2);  
				if( (hitbit_tdc[f] != hitbit_adc[f]) && hitbit_adc[f]==0 ) m_pWrongBits_1->get<TH1I>()->Fill(3);  
				if( (gainbit_tdc[f] != gainbit_adc[f]) && hitbit_adc[f]==0  ) m_pWrongBits_1->get<TH1I>()->Fill(4);  
				if( (hitbit_tdc[f] != hitbit_adc[f]) && (gainbit_tdc[f] != gainbit_adc[f]) && hitbit_adc[f]==0  )
				  m_pWrongBits_1->get<TH1I>()->Fill(5);  
			      }

			      if(f==m_ChannelNum2 && (pAHCALRaw->getIntVal(ChipIDIndex) == m_ChipID2)) {
				if(hitbit_adc[f]==0) m_pADC_hitbit0_2->get<TH1I>()->Fill(adc[f]);
				if(hitbit_adc[f]==1) m_pADC_hitbit1_2->get<TH1I>()->Fill(adc[f]);

				if(hitbit_adc[f]==0) m_pTDC_hitbit0_2->get<TH1I>()->Fill(tdc[f]);
				if(hitbit_adc[f]==1) m_pTDC_hitbit1_2->get<TH1I>()->Fill(tdc[f]);

				m_pADC_ROC_2->get<TH2I>()->Fill(pAHCALRaw->getIntVal(CycleNrIndex),adc[f]); //ROC

				m_pWrongBits_2->get<TH1I>()->Fill(-1);

				if( (hitbit_tdc[f] != hitbit_adc[f]) && hitbit_adc[f]==1 ) {
				  m_pWrongBits_2->get<TH1I>()->Fill(0);  
				  m_pADC_WrongBits_2->get<TH1I>()->Fill(adc[f]);
				  m_pTDC_WrongBits_2->get<TH1I>()->Fill(tdc[f]);
				}
				if( (gainbit_tdc[f] != gainbit_adc[f]) && hitbit_adc[f]==1  ) m_pWrongBits_2->get<TH1I>()->Fill(1);  
				if( (hitbit_tdc[f] != hitbit_adc[f]) && (gainbit_tdc[f] != gainbit_adc[f]) && hitbit_adc[f]==1  )
				  m_pWrongBits_2->get<TH1I>()->Fill(2);  
				if( (hitbit_tdc[f] != hitbit_adc[f]) && hitbit_adc[f]==0 ) m_pWrongBits_2->get<TH1I>()->Fill(3);  
				if( (gainbit_tdc[f] != gainbit_adc[f]) && hitbit_adc[f]==0  ) m_pWrongBits_2->get<TH1I>()->Fill(4);  
				if( (hitbit_tdc[f] != hitbit_adc[f]) && (gainbit_tdc[f] != gainbit_adc[f]) && hitbit_adc[f]==0  )
				  m_pWrongBits_2->get<TH1I>()->Fill(5); 
			      }

			      if(f==m_ChannelNum3 && (pAHCALRaw->getIntVal(ChipIDIndex) == m_ChipID3)) {
				if(hitbit_adc[f]==0) m_pADC_hitbit0_3->get<TH1I>()->Fill(adc[f]);
				if(hitbit_adc[f]==1) m_pADC_hitbit1_3->get<TH1I>()->Fill(adc[f]);

				if(hitbit_adc[f]==0) m_pTDC_hitbit0_3->get<TH1I>()->Fill(tdc[f]);
				if(hitbit_adc[f]==1) m_pTDC_hitbit1_3->get<TH1I>()->Fill(tdc[f]);

				m_pADC_ROC_3->get<TH2I>()->Fill(pAHCALRaw->getIntVal(CycleNrIndex),adc[f]); //ROC

				m_pWrongBits_3->get<TH1I>()->Fill(-1);

				if( (hitbit_tdc[f] != hitbit_adc[f]) && hitbit_adc[f]==1 ) {
				  m_pWrongBits_3->get<TH1I>()->Fill(0); 
				  m_pADC_WrongBits_3->get<TH1I>()->Fill(adc[f]);
				  m_pTDC_WrongBits_3->get<TH1I>()->Fill(tdc[f]);
				}
				if( (gainbit_tdc[f] != gainbit_adc[f]) && hitbit_adc[f]==1  ) m_pWrongBits_3->get<TH1I>()->Fill(1);  
				if( (hitbit_tdc[f] != hitbit_adc[f]) && (gainbit_tdc[f] != gainbit_adc[f]) && hitbit_adc[f]==1  )
				  m_pWrongBits_3->get<TH1I>()->Fill(2);  
				if( (hitbit_tdc[f] != hitbit_adc[f]) && hitbit_adc[f]==0 ) m_pWrongBits_3->get<TH1I>()->Fill(3);  
				if( (gainbit_tdc[f] != gainbit_adc[f]) && hitbit_adc[f]==0  ) m_pWrongBits_3->get<TH1I>()->Fill(4);  
				if( (hitbit_tdc[f] != hitbit_adc[f]) && (gainbit_tdc[f] != gainbit_adc[f]) && hitbit_adc[f]==0  )
				  m_pWrongBits_3->get<TH1I>()->Fill(5); 
			      }

			      if(f==m_ChannelNum4 && (pAHCALRaw->getIntVal(ChipIDIndex) == m_ChipID4)) {
				if(hitbit_adc[f]==0) m_pADC_hitbit0_4->get<TH1I>()->Fill(adc[f]);
				if(hitbit_adc[f]==1) m_pADC_hitbit1_4->get<TH1I>()->Fill(adc[f]);

				if(hitbit_adc[f]==0) m_pTDC_hitbit0_4->get<TH1I>()->Fill(tdc[f]);
				if(hitbit_adc[f]==1) m_pTDC_hitbit1_4->get<TH1I>()->Fill(tdc[f]);

				m_pADC_ROC_4->get<TH2I>()->Fill(pAHCALRaw->getIntVal(CycleNrIndex),adc[f]); //ROC

				m_pWrongBits_4->get<TH1I>()->Fill(-1);

				if( (hitbit_tdc[f] != hitbit_adc[f]) && hitbit_adc[f]==1 ) {
				  m_pWrongBits_4->get<TH1I>()->Fill(0); 
				  m_pADC_WrongBits_4->get<TH1I>()->Fill(adc[f]);
				  m_pTDC_WrongBits_4->get<TH1I>()->Fill(tdc[f]);
				} 
				if( (gainbit_tdc[f] != gainbit_adc[f]) && hitbit_adc[f]==1  ) m_pWrongBits_4->get<TH1I>()->Fill(1);  
				if( (hitbit_tdc[f] != hitbit_adc[f]) && (gainbit_tdc[f] != gainbit_adc[f]) && hitbit_adc[f]==1  )
				  m_pWrongBits_4->get<TH1I>()->Fill(2);  
				if( (hitbit_tdc[f] != hitbit_adc[f]) && hitbit_adc[f]==0 ) m_pWrongBits_4->get<TH1I>()->Fill(3);  
				if( (gainbit_tdc[f] != gainbit_adc[f]) && hitbit_adc[f]==0  ) m_pWrongBits_4->get<TH1I>()->Fill(4);  
				if( (hitbit_tdc[f] != hitbit_adc[f]) && (gainbit_tdc[f] != gainbit_adc[f]) && hitbit_adc[f]==0  )
				  m_pWrongBits_4->get<TH1I>()->Fill(5); 
			      }

			    }//if f== chosen channel

			}//for f

		    }//if chip == chosen chip

		  }//for elements

	      }// if LCGENERICOBJECT

	  }//if collectionName == EUDAQDataScCAL
      }// iterator

    return STATUS_CODE_SUCCESS;

  }

  //-------------------------------------------------------------------------------------------------

  StatusCode AHCALRawModuleChannel::startOfCycle()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- startOfCycle()" );
    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode AHCALRawModuleChannel::endOfCycle()
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- endOfCycle()" );

    // run all quality tests on all monitor elements
    RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::runQualityTests(this));

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode AHCALRawModuleChannel::startOfRun(DQMRun *pRun)
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- startOfRun()" );
    LOG4CXX_INFO( dqmMainLogger , "Run no " << pRun->getRunNumber() );
    //	time_t startTime = pRun->getStartTime();
    time_t startTime = std::chrono::system_clock::to_time_t(pRun->getStartTime());

    std::string timeStr;
    DQMCoreTool::timeToHMS(startTime, timeStr);

    LOG4CXX_INFO( dqmMainLogger , "Start time " << timeStr );
    LOG4CXX_INFO( dqmMainLogger , "Detector is " << pRun->getDetectorName() );
    LOG4CXX_INFO( dqmMainLogger , "Description " << pRun->getDescription() );

    return STATUS_CODE_SUCCESS;
  }

  //-------------------------------------------------------------------------------------------------

  StatusCode AHCALRawModuleChannel::endOfRun(DQMRun *pRun)
  {
    LOG4CXX_INFO( dqmMainLogger , "Module : " << getName() << " -- endOfRun()" );
    LOG4CXX_INFO( dqmMainLogger , "Run no " << pRun->getRunNumber() );

    //	time_t endTime = pRun->getEndTime();
    time_t endTime = std::chrono::system_clock::to_time_t(pRun->getEndTime());
    std::string timeStr;
    DQMCoreTool::timeToHMS(endTime, timeStr);

    LOG4CXX_INFO( dqmMainLogger , "End time " << timeStr );

    return STATUS_CODE_SUCCESS;
  }

};

