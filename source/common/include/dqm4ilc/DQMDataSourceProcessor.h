  /// \file DQMDataSourceProcessor.h
/*
 *
 * DQMDataSourceProcessor.h header template automatically generated by a class generator
 * Creation date : jeu. avr. 14 2016
 *
 * This file is part of DQM4ILC libraries.
 * 
 * DQM4ILC is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4ILC is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4ILC.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMDATASOURCEPROCESSOR_H
#define DQMDATASOURCEPROCESSOR_H

// -- marlin headers
#include "marlin/DataSourceProcessor.h"

// -- dqm4hep headers
#include "dqm4hep/DQMEventClient.h"
#include "dqm4hep/DQMRunControlClient.h"

// -- dqm4ilc headers
#include "dqm4ilc/DQMLCEventStreamer.h"

namespace dqm4ilc
{

/** DQMDataSourceProcessor class
 *
 *  Implements a dqm event client in a data source marlin processor
 *
 *  Two modes can be used :
 *    - Using a run control. No event is processed until a start of
 *      run signal from the run control. When a run is finished, the
 *      processor waits for a start of run signal
 *    - Without run control. Event are processed as they are available
 *      on the collector
 *
 *  If numEvents (parameter MaxRecordNumber in steering file) is
 *  set to zero, then the processor never stops.
 *
 *  Note : the event client and run control client are both DIM implementations
 */ 
class DQMDataSourceProcessor : public marlin::DataSourceProcessor
{
public:
	DQMDataSourceProcessor();
	~DQMDataSourceProcessor() {}

	// from marlin processor
	marlin::Processor *newProcessor();
	void init();
    void end();

    // from data source processor
    void readDataSource( int numEvents );

private:
	void processRunHeader(EVENT::LCRunHeader */*pLCRunHeader*/) {}
	void processEvent(EVENT::LCEvent */*pLCEvent*/) {}
    void check(EVENT::LCEvent */*pLCEvent*/) {}

private:
    dqm4hep::DQMEventClient            *m_pEventClient;
    dqm4hep::DQMRunControlClient       *m_pRunControlClient;
    dqm4ilc::DQMLCEventStreamer        *m_pLCEventStreamer;

    bool                                m_followRunControl;
    std::string                         m_eventCollectorName;
    std::string                         m_runControlName;
    int                                 m_eventQueryTimeout;
};

//------------------------------------------------------------------------------------------------------------------------------------------

inline marlin::Processor *DQMDataSourceProcessor::newProcessor()
{
	return new DQMDataSourceProcessor();
}

} 

#endif  //  DQMDATASOURCEPROCESSOR_H
