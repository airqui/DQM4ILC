  /// \file DQMLCEventStreamer.cc
/*
 *
 * DQMLCEventStreamer.cc source template automatically generated by a class generator
 * Creation date : sam. mars 28 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

// -- dqm4ilc headers
#include "dqm4ilc/DQMLCEventStreamer.h"
#include "dqm4ilc/DQMLCEvent.h"

// -- dqm4hep headers
#include "dqm4hep/DQMPlugin.h"

// -- lcio headers
#include "EVENT/LCEvent.h"

namespace dqm4ilc
{

// declare a streamer plug-in
DQM_PLUGIN_DECL( DQMLCEventStreamer , "LCIOStreamer" )

//-------------------------------------------------------------------------------------------------

DQMLCEventStreamer::DQMLCEventStreamer()
{
	/* nop */
}

//-------------------------------------------------------------------------------------------------

DQMLCEventStreamer::~DQMLCEventStreamer()
{
	/* nop */
}

//-------------------------------------------------------------------------------------------------

dqm4hep::DQMEvent *DQMLCEventStreamer::createEvent() const
{
	DQMLCEvent *pDqmLCEvent = new DQMLCEvent();
	pDqmLCEvent->setEvent(new IMPL::LCEventImpl());

	return pDqmLCEvent;
}

//-------------------------------------------------------------------------------------------------

dqm4hep::StatusCode DQMLCEventStreamer::write(const dqm4hep::DQMEvent *const pEvent, xdrstream::IODevice *pDevice)
{
	if(NULL == pEvent)
		return dqm4hep::STATUS_CODE_INVALID_PTR;

	EVENT::LCEvent *pLCEvent = pEvent->getEvent<EVENT::LCEvent>();

	if(NULL == pLCEvent)
		return dqm4hep::STATUS_CODE_FAILURE;

	xdrstream::Status status = m_xdrLcio.writeEvent( pLCEvent , pDevice );

	if( ! XDR_TESTBIT( status , xdrstream::XDR_SUCCESS ) )
		return dqm4hep::STATUS_CODE_FAILURE;

	return dqm4hep::STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

dqm4hep::StatusCode DQMLCEventStreamer::read(dqm4hep::DQMEvent *&pEvent, xdrstream::IODevice *pDevice)
{
	pEvent = NULL;

	xdrstream::Status status = m_xdrLcio.readNextEvent( pDevice );

	if( ! XDR_TESTBIT( status , xdrstream::XDR_SUCCESS ) )
		return dqm4hep::STATUS_CODE_FAILURE;

	EVENT::LCEvent *pLCEvent = m_xdrLcio.takeLCEvent();

	if(NULL == pLCEvent)
		return dqm4hep::STATUS_CODE_FAILURE;

	pEvent = new DQMLCEvent();
	pEvent->setEvent<EVENT::LCEvent>(pLCEvent, true);

	return dqm4hep::STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

dqm4hep::StatusCode DQMLCEventStreamer::write(const dqm4hep::DQMEvent *const pEvent, const std::string &subEventIdentifier, xdrstream::IODevice *pDevice)
{
	// no sub event queried -> serialize the whole event
	if(subEventIdentifier.empty())
		return this->write(pEvent, pDevice);

	return this->write(pEvent, pDevice);

	// TODO implement xdrLcio.write( evt , pDevice , writeCollectionNames )
//	// split the collection names separated by semi columns
//	StringVector collectionNames;
//	DQM4HEP::tokenize(subEventIdentifier, collectionNames, ":");
//
//	if(collectionNames.empty())
//		return STATUS_CODE_FAILURE;

	return dqm4hep::STATUS_CODE_SUCCESS;
}

} 

